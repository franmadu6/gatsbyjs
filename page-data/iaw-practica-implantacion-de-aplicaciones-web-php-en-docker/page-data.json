{"componentChunkName":"component---src-templates-post-js","path":"/iaw-practica-implantacion-de-aplicaciones-web-php-en-docker","result":{"data":{"markdownRemark":{"html":"<h2 id=\"práctica-implantación-de-aplicaciones-web-php-en-docker\"><a href=\"#pr%C3%A1ctica-implantaci%C3%B3n-de-aplicaciones-web-php-en-docker\" aria-label=\"práctica implantación de aplicaciones web php en docker permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Práctica: Implantación de aplicaciones web PHP en docker.</h2>\n<hr>\n<h3 id=\"tarea-1-ejecución-de-una-aplicación-web-php-en-docker\"><a href=\"#tarea-1-ejecuci%C3%B3n-de-una-aplicaci%C3%B3n-web-php-en-docker\" aria-label=\"tarea 1 ejecución de una aplicación web php en docker permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea 1: Ejecución de una aplicación web PHP en docker.</h3>\n<ul>\n<li>Queremos ejecutar en un contenedor docker la aplicación web escrita en PHP: bookMedik (<a href=\"https://github.com/evilnapsis/bookmedik\">https://github.com/evilnapsis/bookmedik</a>).</li>\n<li>Es necesario tener un contenedor con mariadb donde vamos a crear la base de datos y los datos de la aplicación. El script para generar la base de datos y los registros lo encuentras en el repositorio y se llama schema.sql. Debes crear un usuario con su contraseña en la base de datos. La base de datos se llama bookmedik y se crea al ejecutar el script.</li>\n<li>Ejecuta el contenedor mariadb y carga los datos del script schema.sql. Para más información.</li>\n<li>El contenedor mariadb debe tener un volumen para guardar la base de datos.</li>\n<li>El contenedor que creas debe tener un volumen para guardar los logs de apache2.</li>\n<li>Crea una imagen docker con la aplicación desde una imagen base de debian o ubuntu. Ten en cuenta que el fichero de configuración de la base de datos (core\\controller\\Database.php) lo tienes que configurar utilizando las variables de entorno del contenedor mariadb. (Nota: Para obtener las variables de entorno en PHP usar la función getenv. Para más infomación).</li>\n<li>La imagen la tienes que crear en tu máquina con el comando docker build.</li>\n<li>Crea un script con docker compose que levante el escenario con los dos contenedores.(Usuario: admin, contraseña: admin).</li>\n</ul>\n<hr>\n<p>El primer paso será clonar el repo de la aplicación.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">root@debian:/home/fran/Docker<span class=\"token comment\"># git clone https://github.com/evilnapsis/bookmedik.git</span>\nClonando en <span class=\"token string\">'bookmedik'</span><span class=\"token punctuation\">..</span>.\nremote: Enumerating objects: <span class=\"token number\">856</span>, done.\nremote: Total <span class=\"token number\">856</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>, pack-reused <span class=\"token number\">856</span>\nRecibiendo objetos: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">856</span>/856<span class=\"token punctuation\">)</span>, <span class=\"token number\">1.90</span> MiB <span class=\"token operator\">|</span> <span class=\"token number\">2.14</span> MiB/s, listo.\nResolviendo deltas: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">372</span>/372<span class=\"token punctuation\">)</span>, listo.</code></pre></div>\n<p>Crearemos un repositorio en GitHub con la siguiente estructura, donde bookmedik es el repositorio que acabamos de clonar.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">├── build\n│   ├── bookmedik\n│   ├── Dockerfile\n│   └── script.sh\n├── deploy\n│   └── docker-compose.yml\n└── README.md</code></pre></div>\n<p>Instalaremos docker-compose.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">fran@debian:~/GitHub/PHP-en-Docker/deploy$ <span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> docker-compose</code></pre></div>\n<p>Crearemos el documento de <strong>docker-compose.yml</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">version: <span class=\"token string\">\"3.1\"</span>\n\nservices:\n  db:\n    container_name: servidor_mysql\n    image: mariadb\n    restart: always\n    environment:\n      MYSQL_DATABASE: bookmedik\n      MYSQL_USER: bookmedik\n      MYSQL_PASSWORD: bookmedik\n      MYSQL_ROOT_PASSWORD: fran\n    volumes:\n      - /opt/mysql_wp:/var/lib/mysql</code></pre></div>\n<p>Lo ejecutaremos:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">root@debian:/home/fran/GitHub/PHP-en-Docker/deploy<span class=\"token comment\"># docker-compose up -d</span>\nCreating network <span class=\"token string\">\"deploy_default\"</span> with the default driver\nCreating servidor_mysql <span class=\"token punctuation\">..</span>. <span class=\"token keyword\">done</span></code></pre></div>\n<p>En el directorio <strong>Build</strong> deberemos crear el fichero <strong>Dockerfile</strong> en el que indicaremos como se genera nuestra imagen y tambien clone el repositorio de bookmedik:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">FROM debian\n\nRUN <span class=\"token function\">apt-get</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y apache2 libapache2-mod-php7.3 php7.3 php7.3-mysql <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt-get</span> clean <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">rm</span> -rf /var/lib/apt/lists/*\nRUN <span class=\"token function\">rm</span> /var/www/html/index.html\n\nENV <span class=\"token assign-left variable\">APACHE_SERVER_NAME</span><span class=\"token operator\">=</span>www.bookmedik-madu.org\nENV <span class=\"token assign-left variable\">DATABASE_USER</span><span class=\"token operator\">=</span>bookmedik\nENV <span class=\"token assign-left variable\">DATABASE_PASSWORD</span><span class=\"token operator\">=</span>bookmedik\nENV <span class=\"token assign-left variable\">DATABASE_HOST</span><span class=\"token operator\">=</span>bd\n\nEXPOSE <span class=\"token number\">80</span>\n\nCOPY ./bookmedik /var/www/html\nADD script.sh /usr/local/bin/script.sh\n\nRUN <span class=\"token function\">chmod</span> +x /usr/local/bin/script.sh\n\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/usr/local/bin/script.sh\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>En el mismo directorio <strong>Build</strong> crearemos un fichero llamado <strong>script.sh</strong> en el cual indicaremo las variables de entorno necesarias.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sed</span> -i <span class=\"token string\">'s/<span class=\"token variable\">$this</span>->user=\"root\";/<span class=\"token variable\">$this</span>->user=\"'</span><span class=\"token variable\">${DATABASE_USER}</span><span class=\"token string\">'\";/g'</span> /var/www/html/core/controller/Database.php\n<span class=\"token function\">sed</span> -i <span class=\"token string\">'s/<span class=\"token variable\">$this</span>->pass=\"\";/<span class=\"token variable\">$this</span>->pass=\"'</span><span class=\"token variable\">${DATABASE_PASSWORD}</span><span class=\"token string\">'\";/g'</span> /var/www/html/core/controller/Database.php\n<span class=\"token function\">sed</span> -i <span class=\"token string\">'s/<span class=\"token variable\">$this</span>->host=\"localhost\";/<span class=\"token variable\">$this</span>->host=\"'</span><span class=\"token variable\">${DATABASE_HOST}</span><span class=\"token string\">'\";/g'</span> /var/www/html/core/controller/Database.php\napache2ctl -D FOREGROUND</code></pre></div>\n<p>Una vez echo esto debemos generar nuestra nueva imagen a partir del fichero <strong>Dockerfile</strong> en <strong>Build</strong> ejecutaremos el siguiente comando:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">root@debian:/home/fran/GitHub/PHP-en-Docker/build<span class=\"token comment\"># docker build -t fran/bookmedik:v1 .</span>\n<span class=\"token comment\">#comprobación</span>\nroot@debian:/home/fran/GitHub/PHP-en-Docker/build<span class=\"token comment\"># docker image list</span>\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\nfran/bookmedik                v1                  3f5a2e37e3b6        <span class=\"token number\">3</span> seconds ago       251MB</code></pre></div>\n<p>Despligue de docker-compose, ya con la imagen creada, editaremos nuevamente el fichero <strong>docker-compose.yml</strong> para añadir el nuevo contenedor donde estará alojada nuestra aplicación de bookmedik:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"></code></pre></div>","timeToRead":3,"excerpt":"Práctica: Implantación de aplicaciones web PHP en docker. Tarea 1: Ejecución de una aplicación web PHP en docker. Queremos ejecutar en un…","frontmatter":{"title":"[IAW] - Práctica: Implantación de aplicaciones web PHP en docker ","cover":"https://img.icons8.com/ios/452/work.png","date":"2021-04-06T00:00:00.000Z","categories":["IAW"],"tags":["PHP","Docker"]},"fields":{"slug":"/iaw-practica-implantacion-de-aplicaciones-web-php-en-docker","date":"April 05, 2021"}}},"pageContext":{"slug":"/iaw-practica-implantacion-de-aplicaciones-web-php-en-docker","nexttitle":"[IAW] Introducción a la IC/DC","nextslug":"/iaw-introduccion-a-la-ic-dc","prevtitle":"Práctica 2: rclone - Gestionando nuestro almacenamiento en la nube (unidad 1)","prevslug":"/practica-2-rclone-gestionando-nuestro-almacenamiento-en-la-nube-unidad-1"}}}