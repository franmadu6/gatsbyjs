{"componentChunkName":"component---src-templates-post-js","path":"/practica-introduccion-a-la-integracion-continua","result":{"data":{"markdownRemark":{"html":"<h2 id=\"tarea-integración-continúa-de-aplicación-django-test--deploy\"><a href=\"#tarea-integraci%C3%B3n-contin%C3%BAa-de-aplicaci%C3%B3n-django-test--deploy\" aria-label=\"tarea integración continúa de aplicación django test  deploy permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tarea: Integración continúa de aplicación django (Test + Deploy)</h2>\n<p>Vamos a trabajar con el repositorio de la aplicación django_tutorial. Esta aplicación tiene definidas una serie de test, que podemos estudiar en el fichero tests.py del directorio polls.</p>\n<p>Para ejecutar las pruebas unitarias, ejecutamos la instrucción python3 manage.py test.</p>\n<p>Para comenzar los primero es crear una maquina vagrant con los requisitos que necesitamos</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># -*- mode: ruby -*-</span>\n<span class=\"token comment\"># vi: set ft=ruby :</span>\n\nVagrant.configure<span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>config<span class=\"token operator\">|</span>\n\n        config.vm.define :integracion <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>integracion<span class=\"token operator\">|</span>\n                integracion.vm.box <span class=\"token operator\">=</span> <span class=\"token string\">\"generic/debian10\"</span>\n                integracion.vm.hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"integracion\"</span>\n                integracion.vm.network :public_network,:bridge<span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token string\">\"wlo1\"</span>\n                integracion.vm.network :private_network, ip: <span class=\"token string\">\"192.168.100.142\"</span>\n\t\t    integracion.vm.provision <span class=\"token string\">\"shell\"</span>, inline: <span class=\"token operator\">&lt;&lt;-</span><span class=\"token environment constant\">SHELL</span>\n\t\t\t<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update\n\t\t\t<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> upgrade\n\t\t\t<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span>\n\t\t\t<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y python3-pip\n\t\t\t<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> build-essential libssl-dev libffi-dev python3-dev\n\t\t\t<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y python3-venv\n\t\t<span class=\"token environment constant\">SHELL</span>\n        end\n\nend</code></pre></div>\n<p>En el siguiente paso crearemos un entorno virtual y realizaremos la primera prueba de python3 manage.py test.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">vagrant@integracion:~$ <span class=\"token function\">git</span> clone https://github.com/josedom24/django_tutorial.git\nCloning into <span class=\"token string\">'django_tutorial'</span><span class=\"token punctuation\">..</span>.\nremote: Enumerating objects: <span class=\"token number\">37</span>, done.\nremote: Counting objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">37</span>/37<span class=\"token punctuation\">)</span>, done.\nremote: Compressing objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">32</span>/32<span class=\"token punctuation\">)</span>, done.\nremote: Total <span class=\"token number\">129</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>, reused <span class=\"token number\">24</span> <span class=\"token punctuation\">(</span>delta <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>, pack-reused <span class=\"token number\">92</span>\nReceiving objects: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">129</span>/129<span class=\"token punctuation\">)</span>, <span class=\"token number\">4.25</span> MiB <span class=\"token operator\">|</span> <span class=\"token number\">7.25</span> MiB/s, done.\nResolving deltas: <span class=\"token number\">100</span>% <span class=\"token punctuation\">(</span><span class=\"token number\">28</span>/28<span class=\"token punctuation\">)</span>, done.\nvagrant@integracion:~$ <span class=\"token function\">ls</span>\ndjango_tutorial\nvagrant@integracion:~$ <span class=\"token function\">mkdir</span> environments\nvagrant@integracion:~$ <span class=\"token builtin class-name\">cd</span> environments\nvagrant@integracion:~/environments$ python3.7 -m venv my_env\nvagrant@integracion:~/environments$ <span class=\"token function\">ls</span> my_env/\nbin  include  lib  lib64  pyvenv.cfg  share\nvagrant@integracion:~/environments$ <span class=\"token builtin class-name\">source</span> my_env/bin/activate\n<span class=\"token punctuation\">(</span>my_env<span class=\"token punctuation\">)</span> vagrant@integracion:~/environments$ <span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>\n<span class=\"token punctuation\">(</span>my_env<span class=\"token punctuation\">)</span> vagrant@integracion:~$ <span class=\"token builtin class-name\">cd</span> django_tutorial/\n<span class=\"token punctuation\">(</span>my_env<span class=\"token punctuation\">)</span> vagrant@integracion:~/django_tutorial$ pip <span class=\"token function\">install</span> -r requirements.txt \nCollecting <span class=\"token assign-left variable\">asgiref</span><span class=\"token operator\">==</span><span class=\"token number\">3.3</span>.0 <span class=\"token punctuation\">(</span>from -r requirements.txt <span class=\"token punctuation\">(</span>line <span class=\"token number\">1</span><span class=\"token punctuation\">))</span>\n  Downloading https://files.pythonhosted.org/packages/c0/e8/578887011652048c2d273bf98839a11020891917f3aa638a0bc9ac04d653/asgiref-3.3.0-py3-none-any.whl\nCollecting <span class=\"token assign-left variable\">Django</span><span class=\"token operator\">==</span><span class=\"token number\">3.1</span>.3 <span class=\"token punctuation\">(</span>from -r requirements.txt <span class=\"token punctuation\">(</span>line <span class=\"token number\">2</span><span class=\"token punctuation\">))</span>\n  Downloading https://files.pythonhosted.org/packages/7f/17/16267e782a30ea2ce08a9a452c1db285afb0ff226cfe3753f484d3d65662/Django-3.1.3-py3-none-any.whl <span class=\"token punctuation\">(</span><span class=\"token number\">7</span>.8MB<span class=\"token punctuation\">)</span>\n    <span class=\"token number\">100</span>% <span class=\"token operator\">|</span>████████████████████████████████<span class=\"token operator\">|</span> <span class=\"token number\">7</span>.8MB 209kB/s \nCollecting <span class=\"token assign-left variable\">pytz</span><span class=\"token operator\">==</span><span class=\"token number\">2020.4</span> <span class=\"token punctuation\">(</span>from -r requirements.txt <span class=\"token punctuation\">(</span>line <span class=\"token number\">3</span><span class=\"token punctuation\">))</span>\n  Downloading https://files.pythonhosted.org/packages/12/f8/ff09af6ff61a3efaad5f61ba5facdf17e7722c4393f7d8a66674d2dbd29f/pytz-2020.4-py2.py3-none-any.whl <span class=\"token punctuation\">(</span>509kB<span class=\"token punctuation\">)</span>\n    <span class=\"token number\">100</span>% <span class=\"token operator\">|</span>████████████████████████████████<span class=\"token operator\">|</span> 512kB 904kB/s \nCollecting <span class=\"token assign-left variable\">sqlparse</span><span class=\"token operator\">==</span><span class=\"token number\">0.4</span>.1 <span class=\"token punctuation\">(</span>from -r requirements.txt <span class=\"token punctuation\">(</span>line <span class=\"token number\">4</span><span class=\"token punctuation\">))</span>\n  Downloading https://files.pythonhosted.org/packages/14/05/6e8eb62ca685b10e34051a80d7ea94b7137369d8c0be5c3b9d9b6e3f5dae/sqlparse-0.4.1-py3-none-any.whl <span class=\"token punctuation\">(</span>42kB<span class=\"token punctuation\">)</span>\n    <span class=\"token number\">100</span>% <span class=\"token operator\">|</span>████████████████████████████████<span class=\"token operator\">|</span> 51kB <span class=\"token number\">2</span>.6MB/s \nInstalling collected packages: asgiref, sqlparse, pytz, Django\nSuccessfully installed Django-3.1.3 asgiref-3.3.0 pytz-2020.4 sqlparse-0.4.1\n<span class=\"token punctuation\">(</span>my_env<span class=\"token punctuation\">)</span> vagrant@integracion:~/django_tutorial$ <span class=\"token function\">ls</span>\ndjango_tutorial  manage.py  polls  README.md  requirements.txt\n<span class=\"token punctuation\">(</span>my_env<span class=\"token punctuation\">)</span> vagrant@integracion:~/django_tutorial$ python3 manage.py <span class=\"token builtin class-name\">test</span>\nCreating <span class=\"token builtin class-name\">test</span> database <span class=\"token keyword\">for</span> <span class=\"token builtin class-name\">alias</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">..</span>.\nSystem check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span>.\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\n----------------------------------------------------------------------\nRan <span class=\"token number\">10</span> tests <span class=\"token keyword\">in</span> <span class=\"token number\">0</span>.032s\n\nOK\nDestroying <span class=\"token builtin class-name\">test</span> database <span class=\"token keyword\">for</span> <span class=\"token builtin class-name\">alias</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">..</span>.</code></pre></div>\n<h3 id=\"estudia-las-distintas-pruebas-que-se-han-realizado-y-modifica-el-código-de-la-aplicación-debes-modificar-el-fichero-viewspy-o-los-templates-no-debes-cambiar-el-fichero-testspy-para-que-al-menos-una-de-ella-no-se-ejecute-de-manera-exitosa\"><a href=\"#estudia-las-distintas-pruebas-que-se-han-realizado-y-modifica-el-c%C3%B3digo-de-la-aplicaci%C3%B3n-debes-modificar-el-fichero-viewspy-o-los-templates-no-debes-cambiar-el-fichero-testspy-para-que-al-menos-una-de-ella-no-se-ejecute-de-manera-exitosa\" aria-label=\"estudia las distintas pruebas que se han realizado y modifica el código de la aplicación debes modificar el fichero viewspy o los templates no debes cambiar el fichero testspy para que al menos una de ella no se ejecute de manera exitosa permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Estudia las distintas pruebas que se han realizado, y modifica el código de la aplicación (debes modificar el fichero views.py o los templates, no debes cambiar el fichero tests.py para que al menos una de ella no se ejecute de manera exitosa.</h3>\n<p>El primer paso sera fijarnos en el archivo tests.py y ver cual de los test que realiza puede ser interesante para la prueba.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\">#En test.py</span>\nclass QuestionIndexViewTests<span class=\"token punctuation\">(</span>TestCase<span class=\"token punctuation\">)</span>:\n    def test_no_questions<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>:\n        <span class=\"token string\">\"\"</span><span class=\"token string\">\"\n        If no questions exist, an appropriate message is displayed.\n        \"</span><span class=\"token string\">\"\"</span>\n        response <span class=\"token operator\">=</span> self.client.get<span class=\"token punctuation\">(</span>reverse<span class=\"token punctuation\">(</span><span class=\"token string\">'polls:index'</span><span class=\"token punctuation\">))</span>\n        self.assertEqual<span class=\"token punctuation\">(</span>response.status_code, <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n        self.assertContains<span class=\"token punctuation\">(</span>response, <span class=\"token string\">\"No polls are available.\"</span><span class=\"token punctuation\">)</span>\n        self.assertQuerysetEqual<span class=\"token punctuation\">(</span>response.context<span class=\"token punctuation\">[</span><span class=\"token string\">'latest_question_list'</span><span class=\"token punctuation\">]</span>, <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Modificaremos el mensaje de \"No polls are available.\" y lo traduciremos al español.</p>\n<p>deberemos de buscar el archivo donde se utiliza esa frase.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span>my_env<span class=\"token punctuation\">)</span> vagrant@integracion:~$ <span class=\"token function\">grep</span> -r <span class=\"token string\">\"No polls are available.\"</span> django_tutorial/*\nBinary <span class=\"token function\">file</span> django_tutorial/polls/__pycache__/tests.cpython-37.pyc matches\ndjango_tutorial/polls/tests.py:        self.assertContains<span class=\"token punctuation\">(</span>response, <span class=\"token string\">\"No polls are available.\"</span><span class=\"token punctuation\">)</span>\ndjango_tutorial/polls/tests.py:        self.assertContains<span class=\"token punctuation\">(</span>response, <span class=\"token string\">\"No polls are available.\"</span><span class=\"token punctuation\">)</span>\ndjango_tutorial/polls/templates/polls/index.html:    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>No polls are available.<span class=\"token operator\">&lt;</span>/p<span class=\"token operator\">></span></code></pre></div>\n<p>Modificamos la linea</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">{</span>% load static %<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">&lt;</span>link <span class=\"token assign-left variable\">rel</span><span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> <span class=\"token assign-left variable\">type</span><span class=\"token operator\">=</span><span class=\"token string\">\"text/css\"</span> <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\"{% static 'polls/style.css' %}\"</span><span class=\"token operator\">></span>\n\n<span class=\"token punctuation\">{</span>% <span class=\"token keyword\">if</span> latest_question_list %<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>% <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">question</span> <span class=\"token keyword\">in</span> latest_question_list %<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>a <span class=\"token assign-left variable\">href</span><span class=\"token operator\">=</span><span class=\"token string\">\"{% url 'polls:detail' question.id %}\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> question.question_text <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span>/a<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>/li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>% endfor %<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>/ul<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>% <span class=\"token keyword\">else</span> %<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>No hay encuestas disponibles.<span class=\"token operator\">&lt;</span>/p<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>% endif %<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Y volvemos a pasar el archivo test.py</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token punctuation\">(</span>my_env<span class=\"token punctuation\">)</span> vagrant@integracion:~/django_tutorial$ python3 manage.py <span class=\"token builtin class-name\">test</span>\nCreating <span class=\"token builtin class-name\">test</span> database <span class=\"token keyword\">for</span> <span class=\"token builtin class-name\">alias</span> <span class=\"token string\">'default'</span><span class=\"token punctuation\">..</span>.\nSystem check identified no issues <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> silenced<span class=\"token punctuation\">)</span>.\n<span class=\"token punctuation\">..</span>F.F<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.\n<span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\nFAIL: test_future_question <span class=\"token punctuation\">(</span>polls.tests.QuestionIndexViewTests<span class=\"token punctuation\">)</span>\n----------------------------------------------------------------------\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"/home/vagrant/django_tutorial/polls/tests.py\"</span>, line <span class=\"token number\">73</span>, <span class=\"token keyword\">in</span> test_future_question\n    self.assertContains<span class=\"token punctuation\">(</span>response, <span class=\"token string\">\"No polls are available.\"</span><span class=\"token punctuation\">)</span>\n  File <span class=\"token string\">\"/home/vagrant/environments/my_env/lib/python3.7/site-packages/django/test/testcases.py\"</span>, line <span class=\"token number\">470</span>, <span class=\"token keyword\">in</span> assertContains\n    self.assertTrue<span class=\"token punctuation\">(</span>real_count <span class=\"token operator\">!=</span> <span class=\"token number\">0</span>, msg_prefix + <span class=\"token string\">\"Couldn't find %s in response\"</span> % text_repr<span class=\"token punctuation\">)</span>\nAssertionError: False is not <span class=\"token boolean\">true</span> <span class=\"token builtin class-name\">:</span> Couldn<span class=\"token string\">'t find '</span>No polls are available.<span class=\"token string\">' in response\n\n======================================================================\nFAIL: test_no_questions (polls.tests.QuestionIndexViewTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/vagrant/django_tutorial/polls/tests.py\", line 51, in test_no_questions\n    self.assertContains(response, \"No polls are available.\")\n  File \"/home/vagrant/environments/my_env/lib/python3.7/site-packages/django/test/testcases.py\", line 470, in assertContains\n    self.assertTrue(real_count != 0, msg_prefix + \"Couldn'</span>t <span class=\"token function\">find</span> %s <span class=\"token keyword\">in</span> response\" % text_repr<span class=\"token punctuation\">)</span>\nAssertionError: False is not <span class=\"token boolean\">true</span> <span class=\"token builtin class-name\">:</span> Couldn<span class=\"token string\">'t find '</span>No polls are available.<span class=\"token string\">' in response\n\n----------------------------------------------------------------------\nRan 10 tests in 0.031s\n\nFAILED (failures=2)\nDestroying test database for alias '</span>default'<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>Como podemos comprobar nos salta el mensaje de que el test ha fallado y nos dice que no puede encontrar el mensaje de 'No polls are available.' en la aplicación.</p>\n<hr>\n<p>A continuación vamos a configurar la integración continúa para que cada vez que hagamos un commit se haga la ejecución de test en la herramienta de CI/CD que haya elegido.</p>\n<h3 id=\"crea-el-pipeline-en-el-sistema-de-cicd-para-que-pase-automáticamente-los-tests-muestra-el-fichero-de-configuración-y-una-captura-de-pantalla-con-un-resultado-exitoso-de-la-ic-y-otro-con-un-error\"><a href=\"#crea-el-pipeline-en-el-sistema-de-cicd-para-que-pase-autom%C3%A1ticamente-los-tests-muestra-el-fichero-de-configuraci%C3%B3n-y-una-captura-de-pantalla-con-un-resultado-exitoso-de-la-ic-y-otro-con-un-error\" aria-label=\"crea el pipeline en el sistema de cicd para que pase automáticamente los tests muestra el fichero de configuración y una captura de pantalla con un resultado exitoso de la ic y otro con un error permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Crea el pipeline en el sistema de CI/CD para que pase automáticamente los tests. Muestra el fichero de configuración y una captura de pantalla con un resultado exitoso de la IC y otro con un error.</h3>\n<p>A continuación vamos a realziar el despliegue coontinuo en un servicio de hosting, por ejemplo heroku.</p>\n<h3 id=\"entrega-un-breve-descripción-de-los-pasos-más-importantes-para-realizar-el-despliegue-desde-el-sistema-de-cics-y-entrega-una-prueba-de-funcionamiento-donde-se-compruebe-cómo-se-hace-el-despliegue-automático\"><a href=\"#entrega-un-breve-descripci%C3%B3n-de-los-pasos-m%C3%A1s-importantes-para-realizar-el-despliegue-desde-el-sistema-de-cics-y-entrega-una-prueba-de-funcionamiento-donde-se-compruebe-c%C3%B3mo-se-hace-el-despliegue-autom%C3%A1tico\" aria-label=\"entrega un breve descripción de los pasos más importantes para realizar el despliegue desde el sistema de cics y entrega una prueba de funcionamiento donde se compruebe cómo se hace el despliegue automático permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Entrega un breve descripción de los pasos más importantes para realizar el despliegue desde el sistema de CI/CS y entrega una prueba de funcionamiento donde se compruebe cómo se hace el despliegue automático.</h3>","timeToRead":6,"excerpt":"Tarea: Integración continúa de aplicación django (Test + Deploy) Vamos a trabajar con el repositorio de la aplicación django_tutorial. Esta…","frontmatter":{"title":"Práctica: Introducción a la integración continua","cover":"https://img.icons8.com/ios/452/work.png","date":"2021-01-18T00:00:00.000Z","categories":["IAW"],"tags":["Integración continua","Despliegue continuo"]},"fields":{"slug":"/practica-introduccion-a-la-integracion-continua","date":"January 17, 2021"}}},"pageContext":{"slug":"/practica-introduccion-a-la-integracion-continua","nexttitle":"Análisis puestos de trabajo","nextslug":"/analisis-puestos-de-trabajo","prevtitle":"Práctica 2: rclone - Gestionando nuestro almacenamiento en la nube (unidad 1)","prevslug":"/practica-2-rclone-gestionando-nuestro-almacenamiento-en-la-nube-unidad-1"}}}