{"componentChunkName":"component---src-templates-post-js","path":"/sistemas-de-ficheros-avanzados-zfs-btrfs","result":{"data":{"markdownRemark":{"html":"<p>Elige uno de los dos sistemas de ficheros \"avanzados\".</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Crea un escenario que incluya una máquina y varios discos asociados a ella.\nInstala si es necesario el software de ZFS/Btrfs\nGestiona los discos adicionales con ZFS/Btrfs\nConfigura los discos en RAID, haciendo pruebas de fallo de algún disco y sustitución, restauración del RAID. Comenta ventajas e inconvenientes respecto al uso de RAID software con mdadm.\nRealiza ejercicios con pruebas de funcionamiento de las principales funcionalidades: compresión, cow, deduplicación, cifrado, etc.</code></pre></div>\n<p>Esta tarea se puede realizar en una instancia de OpenStack y documentarla como habitualmente o bien grabar un vídeo con una demo de las características y hacer la entrega con el enlace del vídeo.</p>\n<h3 id=\"escenario\"><a href=\"#escenario\" aria-label=\"escenario permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Escenario</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">fran@debian:~/vagrant/ficheros-zfs$ <span class=\"token function\">cat</span> Vagrantfile \n<span class=\"token comment\"># -*- mode: ruby -*-</span>\n<span class=\"token comment\"># vi: set ft=ruby :</span>\n\nVagrant.configure<span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>zfs<span class=\"token operator\">|</span>\n  zfs.vm.box <span class=\"token operator\">=</span> <span class=\"token string\">\"debian/buster64\"</span>\n  zfs.vm.hostname <span class=\"token operator\">=</span> <span class=\"token string\">\"zfs\"</span>\n  zfs.vm.provider <span class=\"token string\">\"virtualbox\"</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>vb<span class=\"token operator\">|</span>\n    Drives <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1,2</span>,3,4,5<span class=\"token punctuation\">]</span>\n    Drives.each <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>hd<span class=\"token operator\">|</span>\n      puts <span class=\"token string\">\"harddrive #{hd}\"</span>\n      unless File.exist?<span class=\"token punctuation\">(</span><span class=\"token string\">\"./Disco#{hd}.vdi\"</span><span class=\"token punctuation\">)</span>\n        vb.customize <span class=\"token punctuation\">[</span><span class=\"token string\">'createhd'</span>, <span class=\"token string\">'--filename'</span>, <span class=\"token string\">\"./Disco#{hd}.vdi\"</span>,<span class=\"token string\">'--variant'</span>, <span class=\"token string\">'Fixed'</span>, <span class=\"token string\">'--size'</span>, <span class=\"token number\">400</span><span class=\"token punctuation\">]</span>\n      end\n      vb.customize <span class=\"token punctuation\">[</span><span class=\"token string\">'storageattach'</span>, :id,  <span class=\"token string\">'--storagectl'</span>, <span class=\"token string\">'SATA Controller'</span>, <span class=\"token string\">'--port'</span>, hd+1, <span class=\"token string\">'--type'</span>, <span class=\"token string\">'hdd'</span>, <span class=\"token string\">'--medium'</span>, <span class=\"token string\">\"./Disco#{hd}.vdi\"</span><span class=\"token punctuation\">]</span>\n    end\n  end\n  zfsMachine.vm.provision <span class=\"token string\">\"shell\"</span>, inline: <span class=\"token operator\">&lt;&lt;-</span><span class=\"token environment constant\">SHELL</span>\n     <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">''</span><span class=\"token string\">'deb http://deb.debian.org/debian buster-backports main contrib\n             deb-src http://deb.debian.org/debian buster-backports main contrib'</span><span class=\"token string\">''</span> <span class=\"token operator\">>></span> /etc/apt/sources.list\n     <span class=\"token function\">apt</span> update\n  <span class=\"token environment constant\">SHELL</span>\nend</code></pre></div>\n<h3 id=\"preparación-del-escenario-para-la-practica\"><a href=\"#preparaci%C3%B3n-del-escenario-para-la-practica\" aria-label=\"preparación del escenario para la practica permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Preparación del escenario para la practica.</h3>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">apt</span> upgrade -y\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> -y linux-headers-4.19.0-6-amd64\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> -yt buster-backports dkms spl-dkms\n<span class=\"token function\">apt</span> <span class=\"token function\">install</span> -yt buster-backports zfs-dkms zfsutils-linux</code></pre></div>\n<p>Para comprobar que zfs está funcionando podemos ejecutar:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">systemctl status zfs-mount</code></pre></div>\n<h3 id=\"creación-y-configuraciñon-de-los-pool\"><a href=\"#creaci%C3%B3n-y-configuraci%C3%B1on-de-los-pool\" aria-label=\"creación y configuraciñon de los pool permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creación y configuraciñon de los 'pool'.</h3>\n<p>RAIDZ 1, 2 y 3. Dependiendo del tipo tiene uno, dos o tres bit de paridad, necesitándose 3, 4 o 5 discos respectivamente.</p>\n<p>En esta ocasión vamos a trabar con RAIDZ-2 por lo que necesitaremos 4 discos. La creación de estos pool se realiza con el comando zpool.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">zpool create -f EjemploRaidZ raidz2 /dev/sdb /dev/sdc /dev/sdd /dev/sde\nzpool status</code></pre></div>\n<p>De la misma forma que en los RAID tradicionales (como cuando los gestionamos con mdadm), podemos añadir discos de reserva (hot spare). De esta manera, si uno de los discos falla, el hot spare se reemplazaría de forma automática. Para añadir un disco en modo reserva ejecutamos:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">zpool <span class=\"token function\">add</span> EjemploRaidZ spare sdf\nzpool status</code></pre></div>\n<h3 id=\"simulación-de-fallos-y-pruebas-de-redundancia\"><a href=\"#simulaci%C3%B3n-de-fallos-y-pruebas-de-redundancia\" aria-label=\"simulación de fallos y pruebas de redundancia permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Simulación de fallos y pruebas de redundancia.</h3>\n<p>Vamos a ejecutar una serie de comandos para simular un fallo de un disco con el parámetro offline y vamos a obsevar como se reemplaza automáticamente y sin perder información.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\">#Creamos un arbol de directorios</span>\n<span class=\"token function\">mkdir</span> -p /EjemploRaidZ/directorio/subdirectorio/\n<span class=\"token comment\">#Creamos ficheros aleatorios</span>\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/urandom <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/EjemploRaidZ/ficheroRandom <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>64K <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">300</span>\n<span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/urandom <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/EjemploRaidZ/directorio/ficheroRandom <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span>64K <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">600</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Prueba de un fichero\"</span> <span class=\"token operator\">></span> /EjemploRaidZ/directorio/subdirectorio/fichtest</code></pre></div>\n<p>Antes de hacer fallar uno de los discos, vamos a generar un checksum de los dos ficheros aleatorios con el comando md5sum. De esta manera si cambia aunque sea un byte de alguno de los dos ficheros, el checksum será completamente distinto</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">md5sum ficheroRandom \n935a8851f013f41e0dab7afad20b7377  ficheroRandom\nmd5sum directorio/ficheroRandom \n49b5591a6b7daecbecd185bae9e6f769  directorio/ficheroRandom</code></pre></div>\n<p>Para simular el fallo del disco, vamos a ejecutar el siguiente comando.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">zpool offline -f EjemploRaidZ sdc\nzpool status</code></pre></div>\n<p>Como podemos comprobar, aunque el RAID esté degradado, gracias a que tiene una tolerancia a fallos (gracias a los 2 bits de paridad repartidos por todos los discos), seguimos obteniendo los mismos checksum por lo tanto la integridad de los ficheros está garantizada. No obstante ahora mismo nos encontramos sin redundancia, por lo que si quisiésemos acoplar el disco de reserva solo tenemos que ejecutar:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">zpool replace -f EjemploRaidZ sdc sdf\nzpool status</code></pre></div>\n<p>Ahora tenemos dos opciones; podemos indicar que hemos reparado el disco que nos ha fallado, o podemos eliminarlo del RAID y dejar funcionando el disco que antes teníamos de reserva.</p>\n<h3 id=\"restauración-de-un-raid-con-rollback\"><a href=\"#restauraci%C3%B3n-de-un-raid-con-rollback\" aria-label=\"restauración de un raid con rollback permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Restauración de un RAID con “rollback”.</h3>","timeToRead":3,"excerpt":"Elige uno de los dos sistemas de ficheros \"avanzados\". Esta tarea se puede realizar en una instancia de OpenStack y documentarla como…","frontmatter":{"title":"Sistemas de ficheros 'avanzados' ZFS/Btrfs","cover":"https://img.icons8.com/ios/452/work.png","date":"2021-01-27T00:00:00.000Z","categories":["HLC"],"tags":["ZFS/Btrfs","Sistemas de ficheros avanzados"]},"fields":{"slug":"/sistemas-de-ficheros-avanzados-zfs-btrfs","date":"January 26, 2021"}}},"pageContext":{"slug":"/sistemas-de-ficheros-avanzados-zfs-btrfs","nexttitle":"[ABD] - Gestión de Usuarios","nextslug":"/abd-gestion-de-usuarios","prevtitle":"Plan de financiación","prevslug":"/plan-de-financiacion"}}}